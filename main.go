package main

import (
	"fmt"
	"log"
	"net"
)

func main() {

	i, err := net.InterfaceByName("en0")
	if err != nil {
		log.Fatal(err)
	}
	mac := i.HardwareAddr

	// replace client mac with fake one
	mac = []byte{0xdc, 0xa6, 0x32, 0xec, 0xfc, 0x44}

	conn, err := net.ListenUDP("udp", &net.UDPAddr{Port: 68})
	if err != nil {
		log.Fatal("Listen:", err)
	}
	defer func() {
		err = conn.Close()
		if err != nil {
			log.Fatal("Error closing listener:", err)
		}
	}()

	udpPayload := []byte{
		0x01,                   // DHCP Request
		0x01,                   // Ethernet
		0x06,                   // Hardware address length
		0x00,                   // Hops
		0xd0, 0xe3, 0x73, 0xb8, // Transaction ID
		0x00, 0x00, // Seconds elapsed
		0x00, 0x00, // BOOTP flags (request unicast response)
		0x00, 0x00, 0x00, 0x00, // Client IP address
		0x00, 0x00, 0x00, 0x00, // Your (client) IP address
		0x00, 0x00, 0x00, 0x00, // Next server IP address
		0x00, 0x00, 0x00, 0x00, // Relay agent IP address

		mac[0], mac[1], mac[2], mac[3], mac[4], mac[5], // Client MAC address

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Client hardware address padding

		// Server host name
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// Boot file name
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x63, 0x82, 0x53, 0x63, // DHCP magic cookie
		0x35, // Option: Message Type
		0x01, // Length: 1
		0x01, // DHCP Discover Request
		0x37, // Option: Parameter Request List
		0x0e, // Length: 14
		0x01, // Subnet Mask
		0x03, // Router
		0x2b, // Vendor-Specific Information
		0x3c, // Vendor class identifier
		0x42, // TFTP Server Name
		0x43, // Bootfile name
		0x80, // DOCSIS full security server IP
		0x81, // PXE - undefined (vendor specific)
		0x82, // PXE - undefined (vendor specific)
		0x83, // PXE - undefined (vendor specific)
		0x84, // PXE - undefined (vendor specific)
		0x85, // PXE - undefined (vendor specific)
		0x86, // PXE - undefined (vendor specific)
		0x87, // PXE - undefined (vendor specific)

		0x3c, // Option: Vendor Class Identifier
		0x20, // Length: 32

		// "PXEClient:Arch:00000:UNDI:002001"
		0x50, 0x58, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3a, 0x41, 0x72, 0x63, 0x68, 0x3a, 0x30,
		0x30, 0x30, 0x30, 0x30, 0x3a, 0x55, 0x4e, 0x44, 0x49, 0x3a, 0x30, 0x30, 0x32, 0x30, 0x30, 0x31,

		0x5d,       // Option: Client System Architecture
		0x02,       // Length: 2
		0x00, 0x00, // IA x86 PC

		0x5e, // Option: Client Network Device Interface
		0x03, // Length: 3
		0x01, // ??
		0x02, // Major Version: 2
		0x01, // Minor Version: 1

		0x61, // Option: UUID/GUID-based Client Identifier
		0x11, // Length: 17
		0x00, // ??

		// "RPi401.........."
		0x52, 0x50, 0x69, 0x34, 0x30, 0x31, 0xc0, 0x00, 0x32, 0xec, 0xfc, 0x3c, 0xda, 0x06, 0xff, 0xe0,

		0xff, // End of options
	}

	send(conn, &net.UDPAddr{IP: net.IP{255, 255, 255, 255}, Port: 67}, udpPayload)
	buf := make([]byte, 1500)
	recv(conn, buf)

	udpPayload = []byte{
		0x01,                   // DHCP Request
		0x01,                   // Ethernet
		0x06,                   // Hardware address length
		0x00,                   // Hops
		0xd0, 0xe3, 0x73, 0xb8, // Transaction ID
		0x00, 0x00, // Seconds elapsed
		0x00, 0x00, // BOOTP flags (request unicast response)
		0x00, 0x00, 0x00, 0x00, // Client IP address
		0x00, 0x00, 0x00, 0x00, // Your (client) IP address
		0xc0, 0xa8, 0x02, 0x34, // Next server IP address
		0x00, 0x00, 0x00, 0x00, // Relay agent IP address

		mac[0], mac[1], mac[2], mac[3], mac[4], mac[5], // Client MAC address

		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Client hardware address padding

		// Server host name
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		// Boot file name
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

		0x63, 0x82, 0x53, 0x63, // DHCP magic cookie

		0x35, 0x01, 0x03, 0x32, 0x04, 0xc0,
		0xa8, 0x02, 0x28, 0x36, 0x04, 0xc0, 0xa8, 0x02, 0x01, 0x3c, 0x20, 0x50, 0x58, 0x45, 0x43, 0x6c,
		0x69, 0x65, 0x6e, 0x74, 0x3a, 0x41, 0x72, 0x63, 0x68, 0x3a, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3a,
		0x55, 0x4e, 0x44, 0x49, 0x3a, 0x30, 0x30, 0x32, 0x30, 0x30, 0x31, 0x61, 0x11, 0x00, 0x52, 0x50,
		0x69, 0x34, 0x30, 0x31, 0xc0, 0x00, 0x32, 0xec, 0xfc, 0x3c, 0xda, 0x06, 0xff, 0xe0, 0xff,
	}
	send(conn, &net.UDPAddr{IP: net.IP{255, 255, 255, 255}, Port: 67}, udpPayload)
	recv(conn, buf)
}

func send(conn *net.UDPConn, addr *net.UDPAddr, data []byte) {
	n, err := conn.WriteTo(data, addr)
	if err != nil {
		log.Fatal("Write:", err)
	}
	fmt.Println("Sent", n, "bytes", conn.LocalAddr(), "->", addr)
	print(data[:n])
}

func recv(conn *net.UDPConn, buf []byte) {
	n, addr, err := conn.ReadFrom(buf)
	if err != nil {
		log.Fatal("Write:", err)
	}
	fmt.Println("Received", n, "bytes", addr, "->", conn.LocalAddr())
	print(buf[:n])
}

func print(data []byte) {
	fmt.Printf("\n                              ")
	for i := 0; i < len(data); i++ {
		switch i % 16 {
		case 6:
			fmt.Printf("\n%02x", data[i])
		case 14:
			fmt.Printf("  %02x", data[i])
		default:
			fmt.Printf(" %02x", data[i])
		}
	}
	fmt.Printf("\n\n")
}
